#[repr(u8)]
#[derive(Copy, Clone, Debug, Eq, PartialEq)]
pub enum Op {
    Constant,
    Nil,
    True,
    False,
    Pop,
    GetLocal,
    SetLocal,
    GetGlobal,
    SetGlobal,
    DefineGlobal,
    GetUpvalue,
    SetUpvalue,
    GetProperty,
    SetProperty,
    GetSuper,
    Equal,
    Greater,
    Less,
    Add,
    Subtract,
    Multiply,
    Divide,
    Not,
    Negative,
    Print,
    Jump,
    JumpIfFalse,
    Loop,
    Call,
    Invoke,
    SuperInvoke,
    Closure,
    CloseUpvalue,
    Return,
    Class,
    Inherit,
    Method,
}

const OP_COUNT: usize = Op::Method as usize + 1;
const OP_CODES: [Op; OP_COUNT] = [
    Op::Constant,
    Op::Nil,
    Op::True,
    Op::False,
    Op::Pop,
    Op::GetLocal,
    Op::SetLocal,
    Op::GetGlobal,
    Op::SetGlobal,
    Op::DefineGlobal,
    Op::GetUpvalue,
    Op::SetUpvalue,
    Op::GetProperty,
    Op::SetProperty,
    Op::GetSuper,
    Op::Equal,
    Op::Greater,
    Op::Less,
    Op::Add,
    Op::Subtract,
    Op::Multiply,
    Op::Divide,
    Op::Not,
    Op::Negative,
    Op::Print,
    Op::Jump,
    Op::JumpIfFalse,
    Op::Loop,
    Op::Call,
    Op::Invoke,
    Op::SuperInvoke,
    Op::Closure,
    Op::CloseUpvalue,
    Op::Return,
    Op::Class,
    Op::Inherit,
    Op::Method,
];

impl From<u8> for Op {
    fn from(op: u8) -> Self {
        OP_CODES[op as usize]
    }
}
